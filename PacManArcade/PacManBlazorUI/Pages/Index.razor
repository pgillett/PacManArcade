@page "/"
@using PacManArcadeGame.UiStates
@using PacManArcadeGame.GameItems
@using PacManArcadeGame.Graphics
@using PacManArcadeGame.Helpers
@inject IJSRuntime jsRuntime

<canvas tabindex="0" @ref="_canvas" height="288" width="224" style="height: 100%; width: 100%;" @onkeydown="KeyPressed"></canvas>
<img @ref="_spriteMap" src="gfx.png" hidden />



@code
{
    private UiSystem _uiSystem;

    private ElementReference _canvas;
    private ElementReference _canvas2;
    private ElementReference _spriteMap;
    private string Keys;

    private BoardRenderer _boardRenderer;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            SetupSprite();
        }
    }

    protected async Task SetupSprite()
    {
        if (_uiSystem != null) return;

        await jsRuntime.InvokeVoidAsync("SetupCanvas", _canvas, _spriteMap);
        _boardRenderer = new BoardRenderer(jsRuntime);
        _uiSystem = new UiSystem(_boardRenderer);

        var timer = new DateTime().AddSeconds(0.5);
        while (true)
        {
            await Task.Delay(1);
            if (DateTime.Now > timer)
            {
                timer = DateTime.Now.AddMilliseconds(13);
                Tick();
            }
        }
    }

    private int frameSkip = 0;

    protected async Task Tick()
    {
        _uiSystem.Tick();
        frameSkip++;
        if (frameSkip > 0)
        {
            frameSkip = 0;
            jsRuntime.InvokeVoidAsync("SpriteSet", _boardRenderer.Width, _boardRenderer.Height, _boardRenderer.JSData.ToArray());
        }

    }

    private void KeyPressed(KeyboardEventArgs e)
    {
        var _inputs = _uiSystem.Inputs;
        
        switch(e.Key)
        {

            case "ArrowUp":
                _inputs.Direction = InputDirection.Up;
                break;
            case "ArrowDown":
                _inputs.Direction = InputDirection.Down;
                break;
            case "ArrowLeft":
                _inputs.Direction = InputDirection.Left;
                break;
            case "ArrowRight":
                _inputs.Direction = InputDirection.Right;
                break;
            case "C":
            case "c":
                _inputs.Coin = true;
                break;
            case "1":
                _inputs.Player1Start = true;
                break;
            case "R":
            case "r":
                _inputs.Reset = true;
                break;
            case "P":
            case "p":
                _inputs.Pause = true;
                break;
            case "T":
            case "t":
                _inputs.Tick = true;
                break;
            case "I":
            case "i":
                _inputs.Invincible = true;
                break;
            case "F":
            case "f":
                _inputs.FastForward = true;
                break;
        };
    }

}